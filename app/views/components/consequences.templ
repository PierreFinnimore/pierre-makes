package components

import (
	"pierre/app/types"
	"fmt"
)

templ WaitForPoem(room types.Room, triggerOnLoad bool) {
	<div
		hx-get={ `/poetry/room/` + room.Code + `/poem` }
		if triggerOnLoad {
			hx-trigger="load"
		} else {
			hx-trigger="every 3s"
		}
		hx-swap="outerHTML"
	>
		@RoomCode(room.Code)
		<div class="py-4">Waiting for a free poem...</div>
	</div>
}

templ RoomCode(code string) {
	<div class="mb-4">
		@NavLink("/poetry", "Play Another Game")
	</div>
	<h3>Room Code: <span>{ code }</span></h3>
}

templ LineSubmission(visibleLines []types.Line, room types.Room, poem types.Poem) {
	<div class="line-submission">
		@RoomCode(room.Code)
		<p>Lines so far: { fmt.Sprintf("%d", len(poem.Submissions) * room.LinesPerSubmission) }</p>
		<form hx-target="closest .line-submission" hx-swap="outerHTML" hx-post={ `/poetry/room/` + room.Code + `/poem/` + fmt.Sprintf("%d", poem.PoemID) } class="flex flex-col gap-2 ">
			for idx, _ := range visibleLines {
				<div>
					{ visibleLines[idx].Text }
				</div>
			}
			<div>
				Write the
				if len(poem.Submissions) == 0 {
					first
				} else {
					next
				}
				{ fmt.Sprintf("%d", room.LinesPerSubmission) } lines:
			</div>
			for idx := 0; idx < room.LinesPerSubmission; idx++ {
				<input id={ fmt.Sprintf("line%d", idx) } name={ fmt.Sprintf("line%d", idx) } type="text"/>
			}
			if len(poem.Submissions) > 5 {
				<div>
					<label for="lastLine">
						if room.LinesPerSubmission == 1 {
							Is this the last line?
						} else {
							Are these the last lines?
						}
					</label>
					<input id="lastLine" name="lastLine" type="checkbox"/>
				</div>
			}
			<button type="submit" class="btn btn-primary">Submit</button>
		</form>
	</div>
}

templ ViewCompletedPoems(poems []types.Poem) {
	<div class="mb-4">
		@NavLink("/poetry", "Play Another Game")
	</div>
	<div>
		<p>Here are the completed poems:</p>
		<div class="flex gap-2 flex-col">
			for idx := range poems {
				<div class="border p-4 flex flex-col gap-1">
					<h3>Poem { fmt.Sprintf("%d", idx + 1) }</h3>
					for jdx := range poems[idx].Submissions {
						for kdx := range poems[idx].Submissions[jdx].Lines {
							<div>{ poems[idx].Submissions[jdx].Lines[kdx].Text }</div>
						}
					}
				</div>
			}
		</div>
	</div>
}
